git --version - check git version 
git config --global user.name 'SPL' 
git config --global user.email 'spl@gmail.com'


git init - create repo 

configure initail branch name to main 
git config --global init.defaultBranch main

git add - to track 
git status - check status 



git commit -m 'message' - get ur changes commited and make easier to revert when u break something a check point

git log - see history of all commits created

to restore to prev verion - this does not undo the code written just revert to old one
use git log to git commit hash u want to restore to
then 
git checkout hash 

to go back to a current statu u have to run to do it with changes discarded git checkout -f main
git checkout main


a branch is a parallel version of ur code 

local repo - a version of a project that exist on ur pc 
remote repo -a version of a project stored on a servergit


to create a new branch 
git branch branch-name 


to create a new branch and checkout to it to it shortcut 
git checkout -b feature-branch 
 
the branch copies from the branch u are on so make sure u are on the main branch b4 checkout or creating another branch of use this format

git branch new-branch-name source-branch

when writting commit msg it should follow this format if applied to codebase this commit would ....

to publish ur local branch to the remote repo 
upstreap - it links a local branch to a remote branch
git push --set-upstream origin branchname

git pull 
fetch from remote repo


steps 
1 clone the repo
2 create a new branch from the main or another branch
3 make your changes
4 push the branch to the remote repo 
5 open a pull request 
6 merge the changes 
7 pull the merged changes into your local main branch 
8 repeat from step 2



merge conflict
when git is uncertain about which part to publish