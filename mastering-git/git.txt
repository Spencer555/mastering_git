git --version - check git version 
git config --global user.name 'SPL' 
git config --global user.email 'spl@gmail.com'


git init - create repo 

configure initail branch name to main 
git config --global init.defaultBranch main

git add - to track 
git status - check status 



git commit -m 'message' - get ur changes commited and make easier to revert when u break something a check point

git log - see history of all commits created

to restore to prev verion - this does not undo the code written just revert to old one
use git log to git commit hash u want to restore to
then 
git checkout hash 

to go back to a current statu u have to run to do it with changes discarded git checkout -f main
git checkout main


a branch is a parallel version of ur code 

local repo - a version of a project that exist on ur pc 
remote repo -a version of a project stored on a servergit


to create a new branch 
git branch branch-name 


to create a new branch and checkout to it to it shortcut 
git checkout -b feature-branch 
 
the branch copies from the branch u are on so make sure u are on the main branch b4 checkout or creating another branch of use this format

git branch new-branch-name source-branch

when writting commit msg it should follow this format if applied to codebase this commit would ....

to publish ur local branch to the remote repo 
upstreap - it links a local branch to a remote branch
git push --set-upstream origin branchname

git pull 
fetch from remote repo 


conflicts happen when two people make changes to the same file and line


git merge main 
to merge the branch u specified into the branch u are on


git saviour commands
when u break code in production these commands save u 

assuming u made 10 commits and u want to delete all the commits after the 3rd commit


git reset 
staged mode - soft reset it moves the specified commit in history but changes staged 

staged changes - are those we add to git tracking sys by running the git add . 

to do the soft mode 
git reset --soft  <commit hash>



mixed reset 
git reset commit-hash
it moves the specified commit in history and stages the changes and keeps them in the working directory so all changes made after the specified commit would be in ur working directory but they wont be stage u have to manually stage by doing git add .



hard reset 
moves to the specified commit in history and discards all other in the working directory and staging area

git reset --hard  <commit hash>



git revert 
lets say u uploaded a feature that broke production and u want to undo it effects without losing the commit history u want the logs to be there but without losing the old commits



git stash 
u are in the middle of dev a feature but an urgent bug cause by ur team mate comes up and ur boss wants u to work on it first u havent finished ur feature and its not ready to commit yet but u still have to keep ur active changes somewhere so u can get but to them later
this allows u temporarily save ur changes both staged and unstaged without actually commiting them 


just type 
git stash



to get our code
git stash stash-code 

to get list of stash codes 
git stash list